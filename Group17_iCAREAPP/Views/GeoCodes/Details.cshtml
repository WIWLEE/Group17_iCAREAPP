@model List<Group17_iCAREAPP.Models.PatientRecord>

@{
    ViewBag.Title = "Details";
}


<style>
    .geo-description-container {
        display: flex;
        justify-content: space-between; 
        align-items: center; 
        background-color: #007bff; 
        color: #ffffff;
        padding: 15px 20px; 
        border-radius: 8px; 
        margin-bottom: 20px; 
    }

    .geo-description-container h2 {
        margin: 0; 
        font-size: 1.5em; 
    }

    .back-link {
        background-color: #28a745; 
        color: #ffffff; 
        padding: 10px 15px; 
        border: none; 
        border-radius: 5px; 
        text-decoration: none; 
        font-size: 1em;
        transition: background-color 0.2s; 
    }

        .back-link:hover {
            background-color: #218838; 
        }

    .record-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .record-item {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        min-height: 20vh; 
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .record-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .record-name {
        font-size: 1.2em;
        font-weight: bold;
        color: #333;
        margin: 10px 0;
    }

    .record-area {
        font-size: 1em;
        color: #666;
        margin-bottom: 10px;
    }

    .record-buttons {
        display: flex;
        justify-content: space-between;
        gap: 10px;
        margin-top: 15px;
    }

    .record-button {
        padding: 10px 20px;
        font-size: 0.9em;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
        width: 100%;
    }

    .detail-button {
        background-color: #007bff;
        color: #ffffff;
    }

    .assign-button {
        background-color: #28a745;
        color: #ffffff;
    }

    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 500px; 
        max-width: 90%; 
        max-height: 80vh; 
        background-color: white;
        border-radius: 8px;
        padding: 1.5rem;
        overflow-y : auto;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .modal-overlay {
        display: none; 
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .close-button {
        float: right;
        cursor: pointer;
        font-size: 1.2rem;
        color: #333;
    }


    .modal-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .modal-content h4 {
        font-size: 1.3em;
        margin-top: 0;
    }

    .modal-content p {
        font-size: 1em;
        color: #555;
        line-height: 1.4;
    }

    .assign-modal-content label {
        font-size: 1em;
        font-weight: bold;
        margin-top: 1rem;
    }

    .assign-modal-content input,
    .assign-modal-content button {
        width: 100%;
        padding: 10px;
        font-size: 1em;
        margin-top: 0.5rem;
    }

    .assign-modal-content button {
        background-color: #28a745;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .assign-modal-content button:hover {
            background-color: #218838;
        }
</style>

<div class="geo-description-container">
    <h2>@ViewBag.GeoDescription</h2>
    <a class="back-link" href="@Url.Action("Index")">Back</a>
</div>

<div class="record-grid">
    @foreach (var record in Model)
    {
        <div class="record-item">
            <h4 class="record-name">Name: @record.name</h4>
            <p class="record-area">Treatment Area: @record.treatmentArea</p>

            <div class="record-buttons">
                <button class="record-button detail-button" onclick="openModal('@record.ID','@record.name')">Detail Info</button>
                <button class="record-button assign-button" onclick="openAssignModal('@record.ID','@ViewBag.UserId')">Assign</button>
            </div>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal-overlay" id="modalOverlay" onclick="closeModal()"></div>
<div class="modal" id="detailModal">
    <span class="close-button" onclick="closeModal()">×</span>
    <div class ="modal-content" id="modalContent">
        <!-- modal Content - can change-->
    </div>
</div>




<script>
    function openModal(patientId, patientName) {
        fetch(`/TreatmentRecords/GetPatientRecord?patientId=${patientId}`)
            .then(response => response.json())
            .then(data => {
                const modalContent = `
                <h4>Detail Information</h4>
                <p><strong>ID:</strong> ${data.ID}</p>
                <p><strong>Name:</strong> ${data.name}</p>
                <p><strong>Treatment Area:</strong> ${data.treatmentArea}</p>
            `;
                document.getElementById("modalContent").innerHTML = modalContent;
                document.getElementById("modalOverlay").style.display = "block";
                document.getElementById("detailModal").style.display = "block";
            })
            .catch(error => console.error("Error fetching patient details:", error));
    }

    function closeModal() {
        document.getElementById("modalOverlay").style.display = "none";
        document.getElementById("detailModal").style.display = "none";
    }

    function openAssignModal(patientId,workerId){
        $.ajax({
            type: "POST",
            url: '/TreatmentRecords/CheckAssignability',
            data: JSON.stringify({ patientId: patientId }),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                let message = response.message;
                if (response.success) {
                    document.getElementById("modalContent").innerHTML = `
    <h4>Patient Assign</h4>
    <label for="descriptionInput">Treatment Description:</label>
    <input type="text" id="descriptionInput" placeholder="Enter treatment description" oninput="toggleAssignButton()">
    <input type="hidden" id="patientIdInput" value="${patientId}">
    <input type="hidden" id="workerIdInput" value="${workerId}">
    <button id="confirmAssignButton" onclick="assignWorkerSubmit('${response.roleName}')" disabled>Assign</button>
    <button onclick="closeModal()">Close</button>
`;

                    document.getElementById("modalOverlay").style.display = "block";
                    document.getElementById("detailModal").style.display = "block";
                } else {
                    document.getElementById("modalContent").innerHTML = `
     <h4>Patient Assign</h4>
     <label for="descriptionInput">${message}</label>
     <button onclick="closeModal()">Close</button>
 `;

                    document.getElementById("modalOverlay").style.display = "block";
                    document.getElementById("detailModal").style.display = "block";
                }      
            },
            error: function () {
                document.getElementById("modalContent").innerHTML = `
                    <h4>Error</h4>
                    <p>There was an error checking assignability.</p>
                    <button onclick="closeModal()">Close</button>
                `;
            }
        });
    }

    function toggleAssignButton(){
        const description = document.getElementById("descriptionInput").value;
         document.getElementById("confirmAssignButton").disabled = description.trim() === "";
    }

    /*
    function assignWorker(roleName)
    {
        if (roleName === "Nurse")
            assignNurse();
        else if (roleName === "Doctor")
            assignDoctor()
    */

    
    function assignWorkerSubmit(roleName) {
        //const workerId = document.getElementById("workerIdInput").value;
        const patientId = document.getElementById("patientIdInput").value;
        const description = document.getElementById("descriptionInput").value;
        const workerId = document.getElementById("workerIdInput").value;
        var treatmentId = "TREAT-" + new Date().getTime();
        const now = new Date();
        const thedate = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;

 
        const requestData = {
            treatmentID: treatmentId,
            description: description,
            treatmentDate: thedate,
            patientID: patientId,
            workerID: workerId,
            roleName: roleName
        };


        console.log(requestData);


        fetch('@Url.Action("AssignPatient", "TreatmentRecords")', {

            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(requestData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {

                if (data.success);
                    alert(data.message);

                closeModal();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }


</script>

