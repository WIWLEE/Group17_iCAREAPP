@model List<Group17_iCAREAPP.Models.PatientRecord>

@{
    ViewBag.Title = "Details";
}


<h2>Patient Records for GeoCode</h2>

<style>
    .record-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .record-item {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

    .record-buttons {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .detail-button {
        background-color: #007bff;
        color: #ffffff;
    }

    .assign-button {
        background-color: #28a745;
        color: #ffffff;
    }

    .modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 300px;
        background-color: white;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .modal-overlay {
        display: none; /* 기본적으로 숨김 */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .close-button {
        float: right;
        cursor: pointer;
        font-size: 1.2rem;
        color: #333;
    }
</style>

<div class="record-grid">
    @foreach (var record in Model)
    {
        <div class="record-item">
            <h4>Patient ID: @record.ID</h4>
            <p>Name: @record.name</p>
            <p>Treatment Area: @record.treatmentArea</p>

            <div class="record-buttons">
                <button class="record-button detail-button" onclick="openModal('@record.ID','@record.name')">Detail Info</button>
                <button class="record-button assign-button" onclick="openAssignModal('@record.ID','@ViewBag.UserId')">Assign</button>
            </div>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal-overlay" id="modalOverlay" onclick="closeModal()"></div>
<div class="modal" id="detailModal">
    <span class="close-button" onclick="closeModal()">×</span>
    <div id="modalContent">
        <!-- modal Content - can change-->
    </div>
</div>

<!--
<div class="descriotion-modal">
    <span class="close-button" onclick="closeModal()"></span>
    <div id="modalContent">
        <label for="descriptionInput">Treatment Description:</label>
        <input type="text" id="descriptionInput" placeholder="Enter treatment description" oninput="toggleAssignButton()">
        <button id="confrimAssignButton" onclick="submitAssign()" disabled>Assign</button>
    </div>
</div>

-->

<script>
    function openModal(patientId, patientName) {
        document.getElementById("modalContent").innerHTML = `<h4>ID: ${patientId} Name: ${patientName}</h4><p>...</p>`;
        document.getElementById("modalOverlay").style.display = "block";
        document.getElementById("detailModal").style.display = "block";
    }

    function closeModal() {
        document.getElementById("modalOverlay").style.display = "none";
        document.getElementById("detailModal").style.display = "none";
    }

    function openAssignModal(patientId,workerId){

         document.getElementById("modalContent").innerHTML = `
            <h4>Patient Assign</h4>
            <label for="descriptionInput">Treatment Description:</label>
            <input type="text" id="descriptionInput" placeholder="Enter treatment description" oninput="toggleAssignButton()">
            <input type="hidden" id="patientIdInput" value="${patientId}">
            <input type="hidden" id="workerIdInput" value="${workerId}">
            <button id="confirmAssignButton" onclick="submitAssign()" disabled>Assign</button>
            <button onclick="closeModal()">Close</button>
        `;
        console.log(workerId);

        document.getElementById("modalOverlay").style.display = "block";
        document.getElementById("detailModal").style.display = "block";
    }

    function toggleAssignButton(){
        const description = document.getElementById("descriptionInput").value;
         document.getElementById("confirmAssignButton").disabled = description.trim() === "";
    }

    function submitAssign() {
        //const workerId = document.getElementById("workerIdInput").value;
        const patientId = document.getElementById("patientIdInput").value;
        const description = document.getElementById("descriptionInput").value;
        const workerId = document.getElementById("workerIdInput").value;
        var treatmentId = "TREAT-" + new Date().getTime();

        const now = new Date();
        const thedate = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;


        const requestData = {
            treatmentID: treatmentId,
            description: description,
            treatmentDate: thedate,

            patientID: patientId,
            workerID: workerId
        };

        console.log(requestData);

        fetch('@Url.Action("AssignPatient", "TreatmentRecords")', {

            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(requestData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {

                if (data.success);
                    alert(data.message);

                closeModal();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

</script>
<p>
    @Html.ActionLink("Back to List", "Index")
</p>
