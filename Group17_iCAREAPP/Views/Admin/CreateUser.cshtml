
@model Group17_iCAREAPP.Controllers.CreateUserViewModel

@{
    ViewBag.Title = "Create User";
}

<!--Form to create a new user-->
<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Create New User</h2>
        @Html.ActionLink("Back to List", "ManageUsers", null, new { @class = "btn btn-secondary" })
    </div>

    @using (Html.BeginForm("CreateUser", "Admin", FormMethod.Post, new { id = "createUserForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="alert alert-danger" style="display:none;" id="validationSummary">
            Please fix the following errors:
            <ul id="validationList"></ul>
        </div>

        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <!--Prompts for the user's name'-->
                        <div class="form-group">
                            @Html.LabelFor(m => m.Name, new { @class = "form-label required" })
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <!--Prompts for the username-->
                        <div class="form-group">
                            @Html.LabelFor(m => m.Username, new { @class = "form-label required" })
                            @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <!--Prompts for the password-->
                        <div class="form-group">
                            @Html.LabelFor(m => m.Password, new { @class = "form-label required" })
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", id = "password" })
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                            <small class="text-muted">At least 8 characters with numbers and special characters</small>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <!--Drop down for the user role-->
                        <div class="form-group">
                            @Html.LabelFor(m => m.Profession, new { @class = "form-label required" })
                            @Html.DropDownListFor(m => m.Profession, (SelectList)ViewBag.Professions, "Select Profession", new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.Profession, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <!--Creates calendar for selecting expiration date-->
                        <div class="form-group">
                            @Html.LabelFor(m => m.AccountExpiryDate, new { @class = "form-label" })
                            @Html.EditorFor(m => m.AccountExpiryDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                            @Html.ValidationMessageFor(m => m.AccountExpiryDate, "", new { @class = "text-danger" })
                            <small class="text-muted">Leave blank for no expiration</small>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" id="submitButton">Create User</button>
                    @Html.ActionLink("Cancel", "ManageUsers", null, new { @class = "btn btn-outline-secondary ms-2" })
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var form = $('#createUserForm');

            form.on('submit', function (e) {
                e.preventDefault();

                // Clear previous validation messages
                $('#validationSummary').hide();
                $('#validationList').empty();
                $('.text-danger').empty();

                var isValid = true;
                var errors = [];

                // Validate required fields
                var name = $('#Name').val().trim();
                var username = $('#Username').val().trim();
                var password = $('#password').val();
                var profession = $('#Profession').val();

                // Error messages if certain things are not entered
                if (!name) {
                    errors.push('Name is required');
                    isValid = false;
                }

                if (!username) {
                    errors.push('Username is required');
                    isValid = false;
                }

                if (!password) {
                    errors.push('Password is required');
                    isValid = false;
                } else {
                    // Validate password complexity
                    var hasUpperCase = /[A-Z]/.test(password);
                    var hasLowerCase = /[a-z]/.test(password);
                    var hasNumbers = /\d/.test(password);
                    var hasSpecialChar = /[^A-Za-z0-9]/.test(password);
                    var isLongEnough = password.length >= 8;

                    if (!(hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar && isLongEnough)) {
                        errors.push('Password must be at least 8 characters long and contain uppercase, lowercase, numbers, and special characters');
                        isValid = false;
                    }
                }

                if (!profession) {
                    errors.push('Profession is required');
                    isValid = false;
                }

                if (!isValid) {
                    // Display errors
                    errors.forEach(function (error) {
                        $('#validationList').append('<li>' + error + '</li>');
                    });
                    $('#validationSummary').show();
                    return false;
                }

                // If validation passes, submit the form
                console.log('Form is valid, submitting...');
                form[0].submit();
            });
        });
    </script>

    <style>
        .required:after {
            content: " *";
            color: red;
        }
    </style>
}